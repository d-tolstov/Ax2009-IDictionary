Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: IDictionary выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #IDictionary
    PROPERTIES
      Name                #IDictionary
      Extends             #Enumerable
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #IDictionary Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #interface IDictionary extends Enumerable
        #{
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #}
      ENDSOURCE
      SOURCE #Keys
        #ICollection Keys()
        #{
        #}
      ENDSOURCE
      SOURCE #Remove
        #IDictionary Remove(
        #    anytype key
        #)
        #{
        #}
      ENDSOURCE
      SOURCE #Values
        #ICollection Values()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysMap выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysMap
    PROPERTIES
      Name                #SysMap
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysMap Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #;
        #    this.map().insert( key, value);
        #    return this;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class SysMap implements IDictionary
        #{
        #    Map     map;
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #    return this.map().exists( key);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return this.map().elements();
        #}
      ENDSOURCE
      SOURCE #Keys
        #ICollection Keys()
        #{
        #    return SysSet::constructSet(this.map().keySet());
        #}
      ENDSOURCE
      SOURCE #map
        #Map map()
        #{
        #    return map;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(Map _map)
        #{
        #;
        #    if ( !_map)
        #        throw Error(strfmt("В функцию %1 не передан параметр _map!", funcname()));
        #
        #    map = _map;
        #}
      ENDSOURCE
      SOURCE #Remove
        #IDictionary Remove(
        #    anytype key
        #)
        #{
        #    this.map().remove( key);
        #    return this;
        #}
      ENDSOURCE
      SOURCE #Values
        #ICollection Values()
        #{
        #    return SysSet::constructSet(this.map().valueSet());
        #}
      ENDSOURCE
      SOURCE #constructMap
        #static SysMap constructMap(Map _map)
        #{
        #    return new SysMap(_map);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysMap constructType(Types _keyType, Types _valueType)
        #{
        #    return SysMap::constructMap( new Map( _keyType, _valueType));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysIDictionaryCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysIDictionaryCLR
    PROPERTIES
      Name                #SysIDictionaryCLR
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysIDictionaryCLR Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #;
        #    this.invoke(
        #        dictionary
        #      , "Add"
        #      , this.params( this.getObjectForAnyType(key), this.getObjectForAnyType(value))
        #    );
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.IDictionary<TKey,TValue> , реализующая интерфейс IDictionary
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.IDictionary<TKey,TValue>
        #///         SysIDictionaryCLR::constructCollection( collection)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysIDictionaryCLR implements IDictionary
        #{
        #    System.Collections.IEnumerable  dictionary;
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #    return this.invoke(
        #        dictionary
        #      , "ContainsKey"
        #      , this.params( this.getObjectForAnyType(key))
        #    );
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    int ret;
        #;
        #    ret = this.invoke( dictionary, "Count");
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #dictionary
        #System.Object dictionary()
        #{
        #    return dictionary;
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #ISysEnumerator GetEnumerator()
        #{
        #    return SysEnumerator::newFromSystemCollection( dictionary);
        #}
      ENDSOURCE
      SOURCE #getObjectForAnyType
        #protected System.Object getObjectForAnyType(anytype item)
        #{
        #    System.Object       clrObject;
        #    SysICollectionCLR   collectionCLR;
        #    SysIDictionaryCLR   dictCLR;
        #    ClassId             classId;
        #;
        #    if ( typeof(item) == Types::Class)
        #    {
        #        classId = classidget(item);
        #        switch ( classId)
        #        {
        #            case classnum(CLRObject):
        #                clrObject   = item;
        #                break;
        #            default:
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysICollectionCLR)))
        #                {
        #                    collectionCLR   = item;
        #                    clrObject       = collectionCLR.collection();
        #                }
        #                else
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysIDictionaryCLR)))
        #                {
        #                    dictCLR     = item;
        #                    clrObject   = dictCLR.dictionary();
        #                }
        #                else
        #                {
        #                    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #                    clrObject       = CLRInterop::getObjectForAnyType( item);
        #                }
        #                break;
        #        }
        #    }
        #    else
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        clrObject   = CLRInterop::getObjectForAnyType( item);
        #    }
        #
        #    return clrObject;
        #}
      ENDSOURCE
      SOURCE #invoke
        #protected System.Object invoke(
        #    System.Object      _class
        #  , str                _methodName
        #  , Array              _parameters  = new Array(Types::Class)
        #  , boolean            _overloaded  = false
        #)
        #{
        #    System.Type                         classType;
        #    System.Type                         parameterType;
        #    int                                 i = _parameters.lastIndex();
        #    //BP deviation documented
        #    System.Type[]                       parameterTypes;
        #    //BP deviation documented
        #    System.Object[]                     parameters;
        #    System.Object                       parameter;
        #
        #    System.Reflection.MethodInfo        methodInfo;
        #    System.Reflection.PropertyInfo      propertyInfo;
        #    System.Object                       ret;
        #
        #    System.Exception                    e;
        #
        #    System.Reflection.MethodInfo[]      methods;
        #    int                                 methodsQty, methodParametersQty, j;
        #    str                                 methodName;
        #    System.Reflection.ParameterInfo[]   methodParameters;
        #    System.Reflection.ParameterInfo     methodParameterInfo;
        #    System.Type                         methodParameterType;
        #    boolean                             parametersEqual;
        #
        #    try
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        classType       = _class.GetType();
        #        parameterTypes  = new System.Type[i]();
        #        parameters      = new System.Object[i]();
        #
        #        for (i = 1; i <= _parameters.lastIndex(); i++)
        #        {
        #            parameter = _parameters.value(i);
        #            parameterType = parameter.GetType();
        #            parameterTypes.SetValue(parameterType, i - 1);
        #            parameters.SetValue(parameter, i - 1);
        #        }
        #
        #        if (_overloaded)
        #        {
        #            methodInfo = classType.GetMethod(_methodName, parameterTypes); //Gets overload with parameters specified
        #
        #            if (! methodInfo)
        #            {
        #                methods     = classType.GetMethods();
        #                methodsQty  = methods.get_Length();
        #
        #                for (i = 1; i <= methodsQty; i++)
        #                {
        #                    methodInfo          = methods.GetValue(i-1);
        #                    methodName          = methodInfo.get_Name();
        #
        #                    if (methodName == _methodName)
        #                    {
        #                        methodParameters     = methodInfo.GetParameters();
        #                        methodParametersQty  = methodParameters.get_Length();
        #
        #                        if (methodParametersQty == _parameters.lastIndex())
        #                        {
        #                            parametersEqual = true;
        #
        #                            for (j = 1; j <= methodParametersQty; j++)
        #                            {
        #                                methodParameterInfo  = methodParameters.GetValue(j-1);
        #                                methodParameterType  = methodParameterInfo.get_ParameterType();
        #                                parameter                   = _parameters.value(j);
        #                                parameterType               = parameter.GetType();
        #
        #                                if (! methodParameterType.Equals(parameterType))
        #                                {
        #                                    parametersEqual = false;
        #                                }
        #                            }
        #
        #                            if (parametersEqual)
        #                            {
        #                                break;
        #                            }
        #                            else
        #                            {
        #                                methodInfo = null;
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            methodInfo = classType.GetMethod(_methodName);
        #        }
        #
        #        if ( !CLRInterop::isNull(methodInfo))
        #        {
        #            ret = methodInfo.Invoke( _class, parameters);
        #        }
        #        else
        #        {
        #            propertyInfo    = classType.GetProperty(_methodName);
        #            if ( !CLRInterop::isNull(propertyInfo))
        #            {
        #                ret = propertyInfo.GetValue( _class);
        #            }
        #            else
        #                throw Error(strfmt("Метод %1 в классе %2 не найден!", _methodName, CLRInterop::getAnyTypeForObject(classType.ToString())));
        #        }
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        throw error(AifUtil::getClrErrorMessage());
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #json
        #str json()
        #{
        #    return SysJSONConvert::construct().SerializeCLRObject( this.dictionary());
        #}
      ENDSOURCE
      SOURCE #Keys
        #SysICollectionCLR Keys()
        #{
        #    return SysICollectionCLR::constructCollection(
        #        this.invoke(
        #            dictionary
        #          , "Keys"
        #        )
        #    );
        #}
      ENDSOURCE
      SOURCE #new
        #void new( System.Object _dictionary)
        #{
        #;
        #    if ( CLRInterop::isNull(_dictionary))
        #        throw Error(strfmt("В функцию %1 не передан параметр _dictionary!", funcname()));
        #
        #    dictionary = _dictionary;
        #}
      ENDSOURCE
      SOURCE #params
        #protected Array params(
        #    System.Object _parameter1
        #  , System.Object _parameter2 = null
        #  , System.Object _parameter3 = null
        #)
        #{
        #    Array   params;
        #;
        #    params  = new Array(Types::Class);
        #    params.value( 1, _parameter1);
        #    if ( !prmisdefault(_parameter2))
        #    {
        #        params.value( 2, _parameter2);
        #    }
        #    if ( !prmisdefault(_parameter3))
        #    {
        #        params.value( 3, _parameter3);
        #    }
        #
        #    return params;
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysIDictionaryCLR Remove(
        #    anytype key
        #)
        #{
        #;
        #    this.invoke(
        #        dictionary
        #      , "Remove"
        #      , this.params( this.getObjectForAnyType(key))
        #    );
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #Values
        #SysICollectionCLR Values()
        #{
        #    return SysICollectionCLR::constructCollection(
        #        this.invoke(
        #            dictionary
        #          , "Values"
        #        )
        #    );
        #}
      ENDSOURCE
      SOURCE #constructIDictionary
        #static SysIDictionaryCLR constructIDictionary( System.Object _dictionary)
        #{
        #    return new SysIDictionaryCLR(_dictionary);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictionaryCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictionaryCLR
    PROPERTIES
      Name                #SysDictionaryCLR
      Extends             #SysIDictionaryCLR
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.IDictionary<TKey,TValue> , реализующая интерфейс IDictionary
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.Dictionary
        #///         SysDictionaryCLR::constructDictionary( dictionary)
        #///    - новый List с указанием названия типа
        #///         SysDictionaryCLR::constructTypeName( "System.String", "System.Object")
        #///    - новый List с указанием типа
        #///         SysDictionaryCLR::constructType( System.Type::GetType("System.String"), System.Type::GetType("System.Object"))
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysDictionaryCLR extends SysIDictionaryCLR
        #{
        #}
      ENDSOURCE
      SOURCE #constructDictionary
        #static SysDictionaryCLR constructDictionary( System.Object _dictionary)
        #{
        #    return new SysDictionaryCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysDictionaryCLR constructType(
        #    System.Type _keyType
        #  , System.Type _valueType
        #)
        #{
        #;
        #    if ( CLRInterop::isNull(_keyType))
        #        throw Error(strfmt("В функцию %1 не передан параметр _keyType!", funcname()));
        #    if ( CLRInterop::isNull(_valueType))
        #        throw Error(strfmt("В функцию %1 не передан параметр _valueType!", funcname()));
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysDictionaryCLR::constructTypeName( _keyType.ToString(), _valueType.ToString());
        #}
      ENDSOURCE
      SOURCE #constructTypeName
        #static SysDictionaryCLR constructTypeName(
        #    str _keyTypeName    = "System.Object"
        #  , str _valueTypeName  = "System.Object"
        #)
        #{
        #    System.Type         dictType;
        #    System.Object       dict;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    dictType    = SysCLRType::newFromTypeName(
        #                        strfmt( "System.Collections.Generic.Dictionary`2[%1,%2]"
        #                              , _keyTypeName
        #                              , _valueTypeName
        #                              )
        #                  ).parmClrType();
        #    dict        = System.Activator::CreateInstance( dictType);
        #
        #    return SysDictionaryCLR::constructDictionary( dict);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : IDictionary unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #IDictionary
   SHARED
  PROPERTIES
    Name                #IDictionary
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41882
        NODETYPE 329
        NAME #IDictionary
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41885
        NODETYPE 329
        NAME #SysMap
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41886
        NODETYPE 329
        NAME #SysIDictionaryCLR
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41887
        NODETYPE 329
        NAME #SysDictionaryCLR
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
