Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: IDictionary выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #IDictionary
    PROPERTIES
      Name                #IDictionary
      Extends             #Enumerable
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #IDictionary Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #interface IDictionary extends Enumerable
        #{
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( anytype key)
        #{
        #}
      ENDSOURCE
      SOURCE #Keys
        #/// <summary>
        #/// Коллекция ключей
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Keys()
        #{
        #}
      ENDSOURCE
      SOURCE #Remove
        #IDictionary Remove(
        #    anytype key
        #)
        #{
        #}
      ENDSOURCE
      SOURCE #Values
        #/// <summary>
        #/// Коллекция значений
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Values()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysMap выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysMap
    PROPERTIES
      Name                #SysMap
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysMap Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #;
        #    this.map().insert( key, value);
        #    return this;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса Map , реализующая интерфейс IDictionary
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного Map
        #///         SysMap::constructMap( map)
        #///    - новый Map с указанием типа
        #///         SysMap::constructType( Types::Integer, Types::String)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysMap implements IDictionary
        #{
        #    Map     map;
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #    return this.map().exists( key);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return this.map().elements();
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #ISysEnumerator GetEnumerator()
        #{
        #    return SysEnumerator::Map( this.map());
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( anytype key)
        #{
        #    return this.map().lookup(key);
        #}
      ENDSOURCE
      SOURCE #Keys
        #SysSet Keys()
        #{
        #    return SysSet::constructSet(this.map().keySet());
        #}
      ENDSOURCE
      SOURCE #map
        #Map map()
        #{
        #    return map;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(Map _map)
        #{
        #;
        #    if ( !_map)
        #        throw Error(strfmt("В функцию %1 не передан параметр _map!", funcname()));
        #
        #    map = _map;
        #}
      ENDSOURCE
      SOURCE #Remove
        #IDictionary Remove(
        #    anytype key
        #)
        #{
        #    this.map().remove( key);
        #    return this;
        #}
      ENDSOURCE
      SOURCE #struct
        #anytype struct()
        #{
        #    return this.map();
        #}
      ENDSOURCE
      SOURCE #Values
        #SysSet Values()
        #{
        #    return SysSet::constructSet(this.map().valueSet());
        #}
      ENDSOURCE
      SOURCE #constructMap
        #static SysMap constructMap(Map _map)
        #{
        #    return new SysMap(_map);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysMap constructType(Types _keyType, Types _valueType)
        #{
        #    return SysMap::constructMap( new Map( _keyType, _valueType));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysIDictionaryCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysIDictionaryCLR
    PROPERTIES
      Name                #SysIDictionaryCLR
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #_Add
        #protected SysIDictionaryCLR _Add(
        #    anytype key
        #  , anytype value
        #)
        #{
        #    InteropPermission   perm = new InteropPermission(InteropKind::ClrInterop);
        #;
        #    perm.assert();
        #
        #    SysCLRReflection::invokeMethod(
        #        dictionary
        #      , "Add"
        #      , SysCLRReflection::getArray( this.getObjectForAnyType(key), this.getObjectForAnyType(value))
        #    );
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #_ContainsKey
        #protected boolean _ContainsKey(anytype key)
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysCLRReflection::invokeMethod(
        #        dictionary
        #      , "ContainsKey"
        #      , SysCLRReflection::getArray( this.getObjectForAnyType(key))
        #    );
        #}
      ENDSOURCE
      SOURCE #_Item
        #protected anytype _Item(
        #    anytype key
        #)
        #{
        #    System.Object   ret;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = SysCLRReflection::getPropertyValueIndex(
        #        dictionary
        #      , "Item"
        #      , this.getObjectForAnyType(key)
        #    );
        #
        #    return this.getAnytypeForObject( ret);
        #}
      ENDSOURCE
      SOURCE #_Remove
        #protected SysIDictionaryCLR _Remove(
        #    anytype key
        #)
        #{
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    SysCLRReflection::invokeMethod(
        #        dictionary
        #      , "Remove"
        #      , SysCLRReflection::getArray( this.getObjectForAnyType(key))
        #    );
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.IDictionary<TKey,TValue> , реализующая интерфейс IDictionary
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.IDictionary<TKey,TValue>
        #///         SysIDictionaryCLR::constructCollection( collection)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysIDictionaryCLR
        #{
        #    System.Collections.IEnumerable  dictionary;
        #    // Тип словаря
        #    System.Type                     dictionaryType;
        #    str                             dictionaryTypeName;
        #    // Тип ключа коллекции
        #    System.Type                     keyType;
        #    str                             keyTypeName;
        #    // Тип значения коллекции
        #    System.Type                     valueType;
        #    str                             valueTypeName;
        #}
      ENDSOURCE
      SOURCE #Comparer
        #System.Object Comparer()
        #{
        #    return SysCLRReflection::getPropertyValue(
        #        this.dictionary()
        #      , "Comparer"
        #    );
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    int ret;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = SysCLRReflection::getPropertyValue(
        #        dictionary
        #      , "Count"
        #    );
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #dictionary
        #System.Object dictionary()
        #{
        #    return dictionary;
        #}
      ENDSOURCE
      SOURCE #dictionaryType
        #System.Type dictionaryType()
        #{
        #;
        #    if (dictionaryType)
        #        return dictionaryType;
        #
        #    dictionaryType    = this.getDictionaryType();
        #
        #    return dictionaryType;
        #}
      ENDSOURCE
      SOURCE #dictionaryTypeName
        #str dictionaryTypeName()
        #{
        #;
        #    if (dictionaryTypeName)
        #        return dictionaryTypeName;
        #
        #    dictionaryTypeName    = this.getDictionaryTypeName();
        #
        #    return dictionaryTypeName;
        #}
      ENDSOURCE
      SOURCE #getAnytypeForObject
        #protected anytype getAnytypeForObject(System.Object object)
        #{
        #    anytype                 ret;
        #    System.Type             objectType;
        #    str                     objectTypeName;
        #    System.Byte[]           byteArray;
        #    str                     base64String;
        #;
        #    objectType      = object.GetType();
        #    objectTypeName  = objectType.ToString();
        #
        #    setprefix(objectTypeName);
        #
        #    if ( SysStructCLR::typeNameIsStruct( objectTypeName))
        #    {
        #        ret = SysStructCLR::constructDictionary( object);
        #    }
        #    else
        #    if ( SysDictionaryCLR::typeNameIsDictionary( objectTypeName))
        #    {
        #        ret = SysDictionaryCLR::constructDictionary( object);
        #    }
        #    else
        #    // Массивы байтов извлекаем так чтобы потом их использовать для BinData.getData
        #    if ( objectTypeName == "System.Byte[]")
        #    {
        #        byteArray       = object;
        #        base64String    = System.Convert::ToBase64String( byteArray);
        #        ret             = BinData::loadFromBase64( base64String);
        #    }
        #    else
        #    {
        #        ret = CLRInterop::getAnyTypeForObject(object);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getDictionaryType
        #protected System.Type getDictionaryType()
        #{
        #    System.Object                   object = this.dictionary();
        #    System.Type                     typeObject;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    typeObject      = object.GetType();
        #    return typeObject;
        #}
      ENDSOURCE
      SOURCE #getDictionaryTypeName
        #protected str getDictionaryTypeName()
        #{
        #    str                             ret;
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    ret = this.dictionaryType().ToString();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #    return SysEnumerator_IDictionary::construct( dictionary);
        #}
      ENDSOURCE
      SOURCE #getObjectForAnyType
        #protected System.Object getObjectForAnyType(anytype item)
        #{
        #    System.Object       clrObject;
        #    SysICollectionCLR   collectionCLR;
        #    SysIDictionaryCLR   dictCLR;
        #    SysList             sysList;
        #    SysSet              sysSet;
        #    ClassId             classId;
        #    SysDictClass        sysDictClass;
        #    anytype             struct;
        #    Types               itemType;
        #    BinData             binData;
        #;
        #    itemType    = typeof(item);
        #
        #    setprefix( strfmt("%1",itemType));
        #
        #    if ( itemType == Types::Class)
        #    {
        #        classId = classidget(item);
        #        switch ( classId)
        #        {
        #            case classnum(CLRObject):
        #                clrObject   = item;
        #                break;
        #            case classnum(SysList):
        #                sysList     = item;
        #                clrObject   = SysListCLR::constructFromList( sysList.list()).collection();
        #                break;
        #            case classnum(List):
        #                clrObject   = SysListCLR::constructFromList( item).collection();
        #                break;
        #            case classnum(SysSet):
        #                sysSet      = item;
        #                clrObject   = SysListCLR::constructFromSet( sysSet.set()).collection();
        #                break;
        #            case classnum(Set):
        #                clrObject   = SysListCLR::constructFromSet( item).collection();
        #                break;
        #            case classnum(Struct):
        #                clrObject   = SysStructCLR::constructFromStruct( item).dictionary();
        #                break;
        #            default:
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysICollectionCLR)))
        #                {
        #                    collectionCLR   = item;
        #                    clrObject       = collectionCLR.collection();
        #                }
        #                else
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysIDictionaryCLR)))
        #                {
        #                    dictCLR     = item;
        #                    clrObject   = dictCLR.dictionary();
        #                }
        #                else
        #                {
        #                    sysDictClass    = new SysDictClass(classId);
        #                    if ( sysDictClass.hasObjectMethod("struct"))
        #                    {
        #                        struct      = sysDictClass.callObject( "struct", item);
        #                        clrObject   = this.getObjectForAnyType( struct);
        #                    }
        #                    else
        #                    if ( sysDictClass.isImplementing(classnum(Enumerable)))
        #                    {
        #                        clrObject   = SysListCLR::constructFromEnumerable( item).collection();
        #                    }
        #                }
        #                break;
        #        }
        #    }
        #    else
        #    if ( itemType == Types::Enum)
        #    {
        #        clrObject   = CLRInterop::getObjectForAnyType( enum2int(item));
        #    }
        #    else
        #    // Данные из binData.getData
        #    if ( itemType == Types::Container
        #      && conlen( item) == 1
        #      && typeof(conpeek( item, 1)) == Types::BLOB )
        #    {
        #        binData     = new BinData();
        #        binData.setData( item);
        #        clrObject   = System.Convert::FromBase64String( binData.base64Encode());
        #    }
        #    else
        #    {
        #        clrObject   = CLRInterop::getObjectForAnyType( item);
        #    }
        #
        #    return clrObject;
        #}
      ENDSOURCE
      SOURCE #Keys
        #SysICollectionCLR Keys()
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysICollectionCLR::constructCollection(
        #        SysCLRReflection::getPropertyValue(
        #            dictionary
        #          , "Keys"
        #        )
        #    );
        #}
      ENDSOURCE
      SOURCE #new
        #void new( System.Object _dictionary)
        #{
        #;
        #    new InteropPermission( InteropKind::ClrInterop).assert();
        #
        #    if ( CLRInterop::isNull(_dictionary))
        #        throw Error(strfmt("В функцию %1 не передан параметр _dictionary!", funcname()));
        #
        #    dictionary = _dictionary;
        #}
      ENDSOURCE
      SOURCE #params
        #protected Array params(
        #    System.Object _parameter1
        #  , System.Object _parameter2 = null
        #  , System.Object _parameter3 = null
        #)
        #{
        #    Array   params;
        #;
        #    params  = new Array(Types::Class);
        #    params.value( 1, _parameter1);
        #    if ( !prmisdefault(_parameter2))
        #    {
        #        params.value( 2, _parameter2);
        #    }
        #    if ( !prmisdefault(_parameter3))
        #    {
        #        params.value( 3, _parameter3);
        #    }
        #
        #    return params;
        #}
      ENDSOURCE
      SOURCE #struct
        #anytype struct()
        #{
        #    return this.dictionary();
        #}
      ENDSOURCE
      SOURCE #Values
        #SysICollectionCLR Values()
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysICollectionCLR::constructCollection(
        #        SysCLRReflection::getPropertyValue(
        #            dictionary
        #          , "Values"
        #        )
        #    );
        #}
      ENDSOURCE
      SOURCE #constructIDictionary
        #static SysIDictionaryCLR constructIDictionary( System.Object _dictionary)
        #{
        #    return new SysIDictionaryCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #getTypeNameForTypes
        #protected static str getTypeNameForTypes( Types _type)
        #{
        #    str ret;
        #;
        #    switch (_type)
        #    {
        #        case Types::AnyType:
        #        case Types::Class:
        #        case Types::Record:
        #            ret = "System.Object";
        #            break;
        #        case Types::Time:
        #        case Types::Integer:
        #        case Types::Enum:
        #            ret = "System.Int32";
        #            break;
        #        case Types::Int64:
        #            ret = "System.Int64";
        #            break;
        #        case Types::Real:
        #            ret = "System.Double";
        #            break;
        #        case Types::Guid:
        #            ret = "System.Guid";
        #            break;
        #        case Types::String:
        #        case Types::RString:
        #        case Types::VarString:
        #            ret = "System.String";
        #            break;
        #        case Types::UtcDateTime:
        #        case Types::Date:
        #            ret = "System.DateTime";
        #            break;
        #        default:
        #            throw Error(Error::unsupportedEnumValue( funcname(), _type));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictionaryCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictionaryCLR
    PROPERTIES
      Name                #SysDictionaryCLR
      Extends             #SysIDictionaryCLR
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysDictionaryCLR Add(anytype key, anytype value)
        #{
        #    return this._Add( key, value);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.IDictionary<TKey,TValue> , реализующая интерфейс IDictionary
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.Dictionary
        #///         SysDictionaryCLR::constructDictionary( dictionary)
        #///    - новый Dictionary с указанием названия типа
        #///         SysDictionaryCLR::constructTypeName( "System.String", "System.Object")
        #///    - новый Dictionary с указанием типа CLR
        #///         SysDictionaryCLR::constructTypeCLR( System.Type::GetType("System.String"), System.Type::GetType("System.Object"))
        #///    - новый Dictionary с указанием типа
        #///         SysDictionaryCLR::constructType( Types::Integer, Types::String)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysDictionaryCLR extends SysIDictionaryCLR implements IDictionary
        #{
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(anytype key)
        #{
        #    return this._ContainsKey(key);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( anytype key)
        #{
        #    return this._Item(key);
        #}
      ENDSOURCE
      SOURCE #Keys
        #SysICollectionCLR Keys()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysDictionaryCLR Remove(anytype key)
        #{
        #    return this._Remove(key);
        #}
      ENDSOURCE
      SOURCE #Values
        #SysICollectionCLR Values()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #constructDictionary
        #static SysDictionaryCLR constructDictionary( System.Object _dictionary)
        #{
        #    return new SysDictionaryCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #constructIDictionary
        #static SysDictionaryCLR constructIDictionary( System.Object _dictionary)
        #{
        #    return new SysDictionaryCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysDictionaryCLR constructType(
        #    Types _keyType
        #  , Types _valueType
        #)
        #{
        #    return SysDictionaryCLR::constructTypeName(
        #        SysIDictionaryCLR::getTypeNameForTypes(_keyType)
        #      , SysIDictionaryCLR::getTypeNameForTypes(_valueType)
        #    );
        #}
      ENDSOURCE
      SOURCE #constructTypeCLR
        #static SysDictionaryCLR constructTypeCLR(
        #    System.Type _keyType
        #  , System.Type _valueType
        #)
        #{
        #;
        #    if ( CLRInterop::isNull(_keyType))
        #        throw Error(strfmt("В функцию %1 не передан параметр _keyType!", funcname()));
        #    if ( CLRInterop::isNull(_valueType))
        #        throw Error(strfmt("В функцию %1 не передан параметр _valueType!", funcname()));
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysDictionaryCLR::constructTypeName( _keyType.ToString(), _valueType.ToString());
        #}
      ENDSOURCE
      SOURCE #constructTypeName
        #static SysDictionaryCLR constructTypeName(
        #    str _keyTypeName    = SysIDictionaryCLR::getTypeNameForTypes(Types::AnyType)
        #  , str _valueTypeName  = SysIDictionaryCLR::getTypeNameForTypes(Types::AnyType)
        #)
        #{
        #    System.Type         dictType;
        #    System.Object       dict;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    dictType    = SysDictionaryCLR::getDictionaryType(
        #                      _keyTypeName
        #                    , _valueTypeName
        #                  );
        #    dict        = System.Activator::CreateInstance( dictType);
        #
        #    return SysDictionaryCLR::constructDictionary( dict);
        #}
      ENDSOURCE
      SOURCE #getDictionaryType
        #static System.Type getDictionaryType(
        #    str     _keyTypeName
        #  , str     _valueTypeName
        #)
        #{
        #    return SysCLRType::newFromTypeName(
        #               SysDictionaryCLR::getDictionaryTypeName(
        #                   _keyTypeName
        #                 , _valueTypeName
        #               )
        #           ).parmClrType();
        #}
      ENDSOURCE
      SOURCE #getDictionaryTypeName
        #static str getDictionaryTypeName(
        #    str     _keyTypeName
        #  , str     _valueTypeName
        #)
        #{
        #    return strfmt( "System.Collections.Generic.Dictionary`2[%1,%2]"
        #                 , _keyTypeName
        #                 , _valueTypeName
        #                 );
        #}
      ENDSOURCE
      SOURCE #typeNameIsDictionary
        #static boolean typeNameIsDictionary( str _typeName)
        #{
        #    return match( "System.Collections.Generic.Dictionary`2\\[.+,.+\\]", _typeName);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: IStruct выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #IStruct
    PROPERTIES
      Name                #IStruct
      Extends             #Enumerable
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #IStruct Add(
        #    str     key
        #  , anytype value
        #)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #interface IStruct extends Enumerable
        #{
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey( str key)
        #{
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( str key)
        #{
        #}
      ENDSOURCE
      SOURCE #Keys
        #/// <summary>
        #/// Коллекция ключей
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Keys()
        #{
        #}
      ENDSOURCE
      SOURCE #Remove
        #IStruct Remove(
        #    str key
        #)
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStruct выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStruct
    PROPERTIES
      Name                #SysStruct
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysStruct Add(
        #    str     key
        #  , anytype value
        #)
        #{
        #    return this.With( key, value);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса Struct , реализующая интерфейс IStruct
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного Struct
        #///         SysStruct::constructStruct( struct)
        #///    - новый Struct
        #///         SysStruct::construct()
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysStruct implements IStruct
        #{
        #    Struct      struct;
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey( str key)
        #{
        #    return this.struct().exists( key);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return this.struct().fields();
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #    return SysEnumerator_StructKeyValuePair::construct( this.struct());
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( str key)
        #{
        #    return this.struct().value(key);
        #}
      ENDSOURCE
      SOURCE #Keys
        #/// <summary>
        #/// Коллекция ключей
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #SysList Keys()
        #{
        #    SysList                     ret = SysList::constructType( Types::String);
        #    IEnumeratorKeyValuePair     enumerator;
        #    str                         fieldName;
        #;
        #    enumerator  = this.GetEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        fieldName   = enumerator.currentKey();
        #        if ( fieldName)
        #        {
        #            ret.Add( fieldName);
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new( str structStr = '')
        #{
        #;
        #    struct  = new Struct( structStr);
        #}
      ENDSOURCE
      SOURCE #pack
        #container pack()
        #{
        #    return this.struct().pack();
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysStruct Remove(
        #    str key
        #)
        #{
        #    throw Error("Функция Remove в классе Struct работает некорректно. Для вызова Remove нужно использовать другую реализацию интерфейса IStruct. Обратитесь к разработчикам.");
        #}
      ENDSOURCE
      SOURCE #struct
        #Struct struct()
        #{
        #    return struct;
        #}
      ENDSOURCE
      SOURCE #With
        #SysStruct With( str fieldName, anytype value)
        #{
        #;
        #    if ( this.struct().exists( fieldName))
        #    {
        #        this.struct().value( fieldName, value);
        #    }
        #    else
        #    {
        #        this.struct().add( fieldName, value);
        #    }
        #    return this;
        #}
      ENDSOURCE
      SOURCE #WithStruct
        #protected SysStruct WithStruct( Struct _struct)
        #{
        #;
        #    struct  = _struct;
        #    return this;
        #}
      ENDSOURCE
      SOURCE #construct
        #static SysStruct construct( str structStr = '')
        #{
        #    return new SysStruct( structStr);
        #}
      ENDSOURCE
      SOURCE #constructStruct
        #static SysStruct constructStruct( Struct _struct)
        #{
        #    return new SysStruct().WithStruct( _struct);
        #}
      ENDSOURCE
      SOURCE #create
        #static SysStruct create(container _container)
        #{
        #    return SysStruct::constructStruct( Struct::create(_container));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_StructKeyValuePair выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_StructKeyValuePair
    PROPERTIES
      Name                #SysEnumerator_StructKeyValuePair
      Extends             #SysEnumerator_Struct
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysEnumerator_StructKeyValuePair extends SysEnumerator_Struct implements IEnumeratorKeyValuePair
        #{
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_StructKeyValuePair construct(Struct base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_StructKeyValuePair enumerator = new SysEnumerator_StructKeyValuePair(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStructCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStructCLR
    PROPERTIES
      Name                #SysStructCLR
      Extends             #SysIDictionaryCLR
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysStructCLR Add( str key, anytype value)
        #{
        #    return this._Add( key, value);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class SysStructCLR extends SysIDictionaryCLR implements IStruct
        #{
        #}
      ENDSOURCE
      SOURCE #ContainsKey
        #boolean ContainsKey(str key)
        #{
        #    return this._ContainsKey( key);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #IEnumeratorKeyValuePair GetEnumerator()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #Item
        #anytype Item( str key)
        #{
        #    return this._Item(key);
        #}
      ENDSOURCE
      SOURCE #Keys
        #SysICollectionCLR Keys()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysStructCLR Remove( str key)
        #{
        #    return this._Remove( key);
        #}
      ENDSOURCE
      SOURCE #Values
        #SysICollectionCLR Values()
        #{
        #    return super();
        #}
      ENDSOURCE
      SOURCE #construct
        #static SysStructCLR construct()
        #{
        #    System.Object       dict;
        #    System.Type         dictType;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    dictType    = SysStructCLR::getDictionaryType();
        #    dict        = System.Activator::CreateInstance( dictType);
        #
        #    return SysStructCLR::constructDictionary( dict);
        #}
      ENDSOURCE
      SOURCE #constructDictionary
        #static SysStructCLR constructDictionary( System.Object _dictionary)
        #{
        #    return new SysStructCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #constructFromStruct
        #static SysStructCLR constructFromStruct( Struct _struct)
        #{
        #    SysStructCLR    ret;
        #    int             i;
        #    str             fieldName;
        #;
        #    ret = SysStructCLR::construct();
        #    for (i=1; i<=_struct.fields(); i++)
        #    {
        #        fieldName   = _struct.fieldName(i);
        #        if (!fieldName)
        #            continue;
        #
        #        ret.Add( fieldName, _struct.valueIndex(i));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #constructIDictionary
        #static SysStructCLR constructIDictionary( System.Object _dictionary)
        #{
        #    return new SysStructCLR(_dictionary);
        #}
      ENDSOURCE
      SOURCE #constructJson
        #static SysStructCLR constructJson(
        #    str     _json
        #)
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysStructCLR::constructDictionary(
        #        SysJSONConvert::construct().DeserializeCLRObject(
        #            _json
        #          , SysCLRType::newFromTypeName(
        #                SysStructCLR::getDictionaryTypeName()
        #            ).parmClrType()
        #        )
        #    );
        #}
      ENDSOURCE
      SOURCE #getDictionaryType
        #static System.Type getDictionaryType()
        #{
        #    return SysCLRType::newFromTypeName(
        #               SysStructCLR::getDictionaryTypeName()
        #           ).parmClrType();
        #}
      ENDSOURCE
      SOURCE #getDictionaryTypeName
        #static str getDictionaryTypeName()
        #{
        #    return SysDictionaryCLR::getDictionaryTypeName(
        #               SysIDictionaryCLR::getTypeNameForTypes( Types::String)
        #             , SysIDictionaryCLR::getTypeNameForTypes( Types::AnyType)
        #           );
        #}
      ENDSOURCE
      SOURCE #typeNameIsStruct
        #static boolean typeNameIsStruct( str _typeName)
        #{
        #    return match( "System.Collections.Generic.Dictionary`2\\[System.String,System.Object\\]", _typeName)
        #        || _typeName == "Newtonsoft.Json.Linq.JObject" ;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_IDictionary выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_IDictionary
    PROPERTIES
      Name                #SysEnumerator_IDictionary
      Extends             #SysEnumerator_ICollection
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysEnumerator_IDictionary extends SysEnumerator_ICollection implements IEnumeratorKeyValuePair
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    KeyValuePair        ret;
        #    anytype             key;
        #    anytype             value;
        #    InteropPermission   perm = new InteropPermission(InteropKind::ClrInterop);
        #    System.Object       clrObject;
        #    System.Type         objectType;
        #    str                 objectTypeName;
        #    SysRegex            regex;
        #;
        #    Debug::assert(perm != null);
        #    perm.assert();
        #
        #    clrObject       = this.get_Current();
        #    objectType      = clrObject.GetType();
        #    objectTypeName  = CLRInterop::getAnyTypeForObject(objectType.ToString());
        #
        #    regex           = SysRegex::construct("System.Collections.Generic.KeyValuePair`2\\[(.+),(.+)\\]");
        #    if ( !regex.isMatch(objectTypeName))
        #        throw Error( strfmt("В класс SysEnumerator_IDictionary передана коллекция с неверным типом элементов - %1", objectTypeName));
        #
        #    key     = this.getAnytypeForObject( SysCLRReflection::getPropertyValue( clrObject, "Key"));
        #    value   = this.getAnytypeForObject( SysCLRReflection::getPropertyValue( clrObject, "Value"));
        #
        #    return KeyValuePair::construct( key, value);
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    KeyValuePair ret;
        #;
        #    ret = super();
        #
        #    return ret.key();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    KeyValuePair ret;
        #;
        #    ret = super();
        #
        #    return ret.value();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_IDictionary construct(System.Collections.IEnumerable base = null)
        #{
        #    SysEnumerator_IDictionary enumerator = new SysEnumerator_IDictionary(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: IEnumeratorKeyValuePair выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #IEnumeratorKeyValuePair
    PROPERTIES
      Name                #IEnumeratorKeyValuePair
      Extends             #Enumerator
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #interface IEnumeratorKeyValuePair extends Enumerator
        #{
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: KeyValuePair выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #KeyValuePair
    PROPERTIES
      Name                #KeyValuePair
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class KeyValuePair
        #{
        #    anytype     key;
        #    anytype     value;
        #}
      ENDSOURCE
      SOURCE #key
        #anytype key()
        #{
        #    return key;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(
        #    anytype _key
        #  , anytype _value
        #)
        #{
        #;
        #    key     = _key;
        #    value   = _value;
        #}
      ENDSOURCE
      SOURCE #value
        #anytype value()
        #{
        #    return value;
        #}
      ENDSOURCE
      SOURCE #construct
        #static KeyValuePair construct(
        #    anytype key
        #  , anytype value
        #)
        #{
        #    return new KeyValuePair( key, value);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysMapTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysMapTest
    PROPERTIES
      Name                #SysMapTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysMapTest extends SysTestCase
        #{
        #    SysMap     sysMap;
        #}
      ENDSOURCE
      SOURCE #constructMap
        #protected void constructMap( Map _map)
        #{
        #;
        #    sysMap  = SysMap::constructMap( _map);
        #}
      ENDSOURCE
      SOURCE #constructType
        #protected void constructType(
        #    Types _keyType
        #  , Types _valueType
        #)
        #{
        #;
        #    sysMap  = SysMap::constructType( _keyType, _valueType);
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    sysMap.Add( 10, "01");
        #    this.assertEquals( 1, sysMap.Count());
        #    sysMap.Add( 20, "02");
        #    this.assertEquals( 2, sysMap.Count());
        #}
      ENDSOURCE
      SOURCE #testConstructMap
        #void testConstructMap()
        #{
        #;
        #    this.constructMap( new Map(Types::Integer, Types::String));
        #    this.assertNotNull(sysMap);
        #}
      ENDSOURCE
      SOURCE #testConstructType
        #void testConstructType()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    this.assertNotNull(sysMap);
        #}
      ENDSOURCE
      SOURCE #testContainsKey
        #void testContainsKey()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    sysMap.Add(10, "10");
        #    sysMap.Add(20, "20");
        #
        #    this.assertTrue( sysMap.ContainsKey(20));
        #    this.assertFalse( sysMap.ContainsKey(30));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    this.assertEquals( 0, sysMap.Count());
        #
        #    sysMap.map().insert( 10, "10");
        #    this.assertEquals( 1, sysMap.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Enumerator  enumerator;
        #    int         i;
        #;
        #    this.constructType(Types::Integer,Types::String);
        #    sysMap.Add(10,"10");
        #    sysMap.Add(20,"20");
        #
        #    enumerator  = sysMap.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testItem
        #void testItem()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysMap.Add(10, "10");
        #    this.assertEquals( "10", sysMap.Item(10));
        #}
      ENDSOURCE
      SOURCE #testKeys
        #void testKeys()
        #{
        #    SysSet      sysSet;
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysMap.map().insert( 10, "10");
        #    sysMap.map().insert( 20, "20");
        #
        #    sysSet  = sysMap.Keys();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysMap.Add(10, "10");
        #    this.assertEquals( 1, sysMap.Count());
        #    sysMap.Add(20, "10");
        #    this.assertEquals( 2, sysMap.Count());
        #    sysMap.Remove(30);
        #    this.assertEquals( 2, sysMap.Count());
        #    sysMap.Remove(20);
        #    this.assertEquals( 1, sysMap.Count());
        #}
      ENDSOURCE
      SOURCE #testValues
        #void testValues()
        #{
        #    SysSet      sysSet;
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysMap.map().insert( 10, "10");
        #    sysMap.map().insert( 20, "20");
        #
        #    sysSet  = sysMap.Values();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictionaryCLRTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictionaryCLRTest
    PROPERTIES
      Name                #SysDictionaryCLRTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysDictionaryCLRTest extends SysTestCase
        #{
        #    SysDictionaryCLR     sysDict;
        #}
      ENDSOURCE
      SOURCE #constructType
        #protected void constructType(
        #    Types _keyType
        #  , Types _valueType
        #)
        #{
        #;
        #    sysDict  = SysDictionaryCLR::constructType( _keyType, _valueType);
        #}
      ENDSOURCE
      SOURCE #constructTypeName
        #protected void constructTypeName(
        #    str _keyType
        #  , str _valueType
        #)
        #{
        #;
        #    sysDict  = SysDictionaryCLR::constructTypeName( _keyType, _valueType);
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    sysDict.Add( 10, "01");
        #    this.assertEquals( 1, sysDict.Count());
        #    sysDict.Add( 20, "02");
        #    this.assertEquals( 2, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testConstructType
        #void testConstructType()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    this.assertNotNull(sysDict);
        #}
      ENDSOURCE
      SOURCE #testConstructTypeName
        #void testConstructTypeName()
        #{
        #;
        #    this.constructTypeName( "System.Int32", "System.String");
        #    this.assertNotNull(sysDict);
        #}
      ENDSOURCE
      SOURCE #testContainsKey
        #void testContainsKey()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    sysDict.Add(10, "10");
        #    sysDict.Add(20, "20");
        #
        #    this.assertTrue( sysDict.ContainsKey(20));
        #    this.assertFalse( sysDict.ContainsKey(30));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #    this.assertEquals( 0, sysDict.Count());
        #
        #    sysDict.Add( 10, "10");
        #    this.assertEquals( 1, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    IEnumeratorKeyValuePair enumerator;
        #    int                     i;
        #;
        #    this.constructType(Types::Integer,Types::String);
        #    sysDict.Add(10,"10");
        #    sysDict.Add(20,"20");
        #
        #    enumerator  = sysDict.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testItem
        #void testItem()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysDict.Add(10, "10");
        #    this.assertEquals( "10", sysDict.Item(10));
        #}
      ENDSOURCE
      SOURCE #testKeys
        #void testKeys()
        #{
        #    ICollection      sysSet;
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysDict.Add( 10, "10");
        #    sysDict.Add( 20, "20");
        #
        #    sysSet  = sysDict.Keys();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysDict.Add(10, "10");
        #    this.assertEquals( 1, sysDict.Count());
        #    sysDict.Add(20, "10");
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Remove(30);
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Remove(20);
        #    this.assertEquals( 1, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testTypeNameIsStruct
        #void testTypeNameIsStruct()
        #{
        #;
        #    this.constructType( Types::String, Types::String);
        #
        #    this.assertTrue( SysDictionaryCLR::typeNameIsDictionary( sysDict.dictionaryTypeName()));
        #}
      ENDSOURCE
      SOURCE #testValues
        #void testValues()
        #{
        #    ICollection      sysSet;
        #;
        #    this.constructType( Types::Integer, Types::String);
        #
        #    sysDict.Add( 10, "10");
        #    sysDict.Add( 20, "20");
        #
        #    sysSet  = sysDict.Values();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStructTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStructTest
    PROPERTIES
      Name                #SysStructTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysStructTest extends SysTestCase
        #{
        #    SysStruct     sysDict;
        #}
      ENDSOURCE
      SOURCE #construct
        #protected void construct()
        #{
        #;
        #    sysDict  = SysStruct::construct();
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "01");
        #    this.assertEquals( 1, sysDict.Count());
        #    sysDict.Add( "20", "02");
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Add( "30"
        #               , SysStruct::construct()
        #                    .Add( "param1", 500)
        #                    .Add( "param2", 600)
        #               );
        #    this.assertEquals( 3, sysDict.Count());
        #    sysDict.Add( "40"
        #               , SysList::constructType( Types::String)
        #                    .Add( "param1")
        #                    .Add( "param2")
        #               );
        #    this.assertEquals( 4, sysDict.Count());
        #    sysDict.Add( "50"
        #               , SysList::constructType( Types::Class)
        #                    .Add( SysStruct::construct()
        #                            .Add( "itemid", "test")
        #                            .Add( "price", 1000)
        #                        )
        #                    .Add( SysStruct::construct()
        #                            .Add( "itemid", "test2")
        #                            .Add( "price", 1500)
        #                        )
        #               );
        #    this.assertEquals( 5, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testAddICollection
        #void testAddICollection()
        #{
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", SysList::constructType());
        #    ICollectionStatic::construct( sysDict.Item("10"))
        #    .Add(800);
        #    ICollectionStatic::construct( sysDict.Item("10"))
        #    .Add(systemdateget());
        #
        #    this.assertEquals( 2, ICollectionStatic::construct( sysDict.Item("10")).Count());
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #void testConstruct()
        #{
        #;
        #    this.construct();
        #    this.assertNotNull(sysDict);
        #}
      ENDSOURCE
      SOURCE #testContainsKey
        #void testContainsKey()
        #{
        #;
        #    this.construct();
        #    sysDict.Add("10", "10");
        #    sysDict.Add("20", "20");
        #
        #    this.assertTrue( sysDict.ContainsKey("20"));
        #    this.assertFalse( sysDict.ContainsKey("30"));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.construct();
        #    this.assertEquals( 0, sysDict.Count());
        #
        #    sysDict.Add( "10", "10");
        #    this.assertEquals( 1, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    IEnumeratorKeyValuePair enumerator;
        #    int                     i;
        #;
        #    this.construct();
        #    sysDict.Add("10","10");
        #    sysDict.Add("20","20");
        #
        #    enumerator  = sysDict.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testItem
        #void testItem()
        #{
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "20");
        #    this.assertEquals( "20", sysDict.Item("10"));
        #}
      ENDSOURCE
      SOURCE #testKeys
        #void testKeys()
        #{
        #    ICollection      sysSet;
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "10");
        #    sysDict.Add( "20", "20");
        #
        #    sysSet  = sysDict.Keys();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.construct();
        #    sysDict.Add("10", "10");
        #    this.parmExceptionExpected( true, "Функция Remove в классе Struct работает некорректно. Для вызова Remove нужно использовать другую реализацию интерфейса IStruct. Обратитесь к разработчикам.");
        #    sysDict.Remove("10");
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStructCLRTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStructCLRTest
    PROPERTIES
      Name                #SysStructCLRTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysStructCLRTest extends SysTestCase
        #{
        #    SysStructCLR     sysDict;
        #}
      ENDSOURCE
      SOURCE #construct
        #protected void construct()
        #{
        #;
        #    sysDict  = SysStructCLR::construct();
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "01");
        #    this.assertEquals( 1, sysDict.Count());
        #    sysDict.Add( "20", "02");
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Add( "30"
        #               , SysStructCLR::construct()
        #                    .Add( "param1", 500)
        #                    .Add( "param2", 600)
        #               );
        #    this.assertEquals( 3, sysDict.Count());
        #    sysDict.Add( "40"
        #               , SysListCLR::constructType( Types::String)
        #                    .Add( "param1")
        #                    .Add( "param2")
        #               );
        #    this.assertEquals( 4, sysDict.Count());
        #    sysDict.Add( "50"
        #               , SysListCLR::constructType( Types::Class)
        #                    .Add( SysStructCLR::construct()
        #                            .Add( "itemid", "test")
        #                            .Add( "price", 1000)
        #                        )
        #                    .Add( SysStructCLR::construct()
        #                            .Add( "itemid", "test2")
        #                            .Add( "price", 1500)
        #                        )
        #               );
        #    this.assertEquals( 5, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #void testConstruct()
        #{
        #;
        #    this.construct();
        #    this.assertNotNull(sysDict);
        #}
      ENDSOURCE
      SOURCE #testContainsKey
        #void testContainsKey()
        #{
        #;
        #    this.construct();
        #    sysDict.Add("10", "10");
        #    sysDict.Add("20", "20");
        #
        #    this.assertTrue( sysDict.ContainsKey("20"));
        #    this.assertFalse( sysDict.ContainsKey("30"));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.construct();
        #    this.assertEquals( 0, sysDict.Count());
        #
        #    sysDict.Add( "10", "10");
        #    this.assertEquals( 1, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    IEnumeratorKeyValuePair enumerator;
        #    int                     i;
        #;
        #    this.construct();
        #    sysDict.Add("10","10");
        #    sysDict.Add("20","20");
        #
        #    enumerator  = sysDict.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testItem
        #void testItem()
        #{
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "20");
        #    this.assertEquals( "20", sysDict.Item("10"));
        #}
      ENDSOURCE
      SOURCE #testKeys
        #void testKeys()
        #{
        #    ICollection      sysSet;
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "10");
        #    sysDict.Add( "20", "20");
        #
        #    sysSet  = sysDict.Keys();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.construct();
        #    sysDict.Add("10", "10");
        #    this.assertEquals( 1, sysDict.Count());
        #    sysDict.Add("20", "10");
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Remove("30");
        #    this.assertEquals( 2, sysDict.Count());
        #    sysDict.Remove("20");
        #    this.assertEquals( 1, sysDict.Count());
        #}
      ENDSOURCE
      SOURCE #testTypeNameIsStruct
        #void testTypeNameIsStruct()
        #{
        #;
        #    this.construct();
        #
        #    this.assertTrue( SysStructCLR::typeNameIsStruct( sysDict.dictionaryTypeName()));
        #}
      ENDSOURCE
      SOURCE #testValues
        #void testValues()
        #{
        #    ICollection      sysSet;
        #;
        #    this.construct();
        #
        #    sysDict.Add( "10", "10");
        #    sysDict.Add( "20", "20");
        #
        #    sysSet  = sysDict.Values();
        #
        #    this.assertNotNull( sysSet);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : IDictionary unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #IDictionary
   SHARED
  PROPERTIES
    Name                #IDictionary
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41882
        NODETYPE 329
        NAME #IDictionary
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41885
        NODETYPE 329
        NAME #SysMap
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41886
        NODETYPE 329
        NAME #SysIDictionaryCLR
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41887
        NODETYPE 329
        NAME #SysDictionaryCLR
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41895
        NODETYPE 329
        NAME #IStruct
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41871
        NODETYPE 329
        NAME #SysStruct
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41919
        NODETYPE 329
        NAME #SysEnumerator_StructKeyValuePair
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41896
        NODETYPE 329
        NAME #SysStructCLR
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41913
        NODETYPE 329
        NAME #SysEnumerator_IDictionary
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41915
        NODETYPE 329
        NAME #IEnumeratorKeyValuePair
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41914
        NODETYPE 329
        NAME #KeyValuePair
      ENDNODE
      ENDGROUP
      
    GROUP #Test
      PROPERTIES
        Name                #Test
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41891
        NODETYPE 329
        NAME #SysMapTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41894
        NODETYPE 329
        NAME #SysDictionaryCLRTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41899
        NODETYPE 329
        NAME #SysStructTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41898
        NODETYPE 329
        NAME #SysStructCLRTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
