@startuml "IDictionary"

interface Enumerable{
    GetEnumerator() : Enumerator
}

interface IDictionary{
    Add(anytype key, anytype value) : IDictionary
    Count() : int
    ContainsKey(anytype key) : boolean
    Item(anytype key) : anytype
    Remove(anytype key) : IDictionary
    GetEnumerator() : ISysEnumerator
    Keys() : ICollection
    Values() : ICollection
}
Enumerable <|-- IDictionary

class SysMap{
    Add(anytype key, anytype value) : SysMap
    Remove(anytype key) : SysMap
}
IDictionary <|.. SysMap

class Map{
}
SysMap o-- Map

class SysIDictionaryCLR{
    Add(anytype key, anytype value) : SysIDictionaryCLR
    Remove(anytype key) : SysIDictionaryCLR
}
IDictionary <|.. SysIDictionaryCLR

interface IStruct{
    Add(str key, anytype value) : IStruct
    ContainsKey(str key) : boolean
    Item(str key) : anytype
    Remove(str key) : IStruct
}
Enumerable <|- IStruct

class SysStructCLR{
    Add(str key, anytype value) : SysStructCLR
    Remove(str key) : SysStructCLR
}
IStruct <|.. SysStructCLR

package System.Collections.Generic{
    interface IDictionary(TKey,TValue){
    }
    SysIDictionaryCLR o-- "IDictionary(TKey,TValue)"
    "IDictionary(TKey,TValue)" <|. "Dictionary(TKey,TValue)"
    SysStructCLR o-- "Dictionary(TKey,TValue)"
}

class SysHashtableCLR{
    Add(str key, anytype value) : SysHashtableCLR
    Remove(str key) : SysHashtableCLR
}
IStruct <|.. SysHashtableCLR

package System.Collections{
    class Hashtable{
    }
    SysHashtableCLR o-- Hashtable
}

class SysStruct{
    Add(str key, anytype value) : SysStruct
    Remove(str key) : SysStruct
}
IStruct <|.. SysStruct

class Struct{
}
SysStruct o-- Struct

@enduml